#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 10>;
        };

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
        };

        bootloader {
            bindings = <&bootloader>;
            key-positions = <15 27>;
        };

        boot2 {
            bindings = <&bootloader>;
            key-positions = <16 28>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q       &kp W      &kp E                &kp R           &kp T                                                 &kp Y            &kp U    &kp I      &kp O           &kp P
&kp A       &kp S      &kp D                &kp F           &kp G        &none            &none                   &kp H            &lt 2 J  &kp K      &kp L           &kp BACKSPACE
&kp Z       &kp X      &kp C                &kp V           &kp B        &none            &none                   &kp N            &kp M    &kp LANG2  &kp LANGUAGE_1  &kp ENTER
&kp LSHIFT  &kp LCTRL  &mt LALT LANGUAGE_2  &mt LWIN SPACE  &lt 2 SPACE  &lt 1 SPACE      &lt_to_layer_0 1 ENTER  &lt 2 BACKSPACE                                      &mo 3
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        SYMBOL {
            bindings = <
&kp EXCLAMATION  &kp AT         &kp HASH      &kp DOLLAR            &kp PERCENT                                &kp MINUS      &kp EQUAL   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp GRAVE
&kp CARET        &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans      &trans  &kp SEMICOLON  &kp SQT     &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &trans
&trans           &trans         &trans        &trans                &trans                 &trans      &trans  &kp COMMA      &kp PERIOD  &kp SLASH             &kp BACKSLASH          &trans
&trans           &trans         &trans        &trans                &trans                 &trans      &trans  &kp DELETE                                                              &none
            >;
        };

        NUM_ARROW {
            bindings = <
&kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5                      &trans    &trans     &kp DELETE    &kp BACKSPACE  &trans
&kp NUMBER_6  &kp N7        &kp N8        &kp N9        &kp N0  &trans      &trans  &trans    &trans     &kp SPACE     &kp ENTER      &trans
&trans        &trans        &trans        &trans        &trans  &trans      &trans  &kp LEFT  &kp RIGHT  &kp UP_ARROW  &kp RIGHT      &trans
&trans        &trans        &trans        &trans        &trans  &trans      &trans  &trans                                            &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        function {
            bindings = <
&kp F1   &kp F2   &kp F3  &kp F4  &kp F5                                 &bt BT_CLR     &bootloader     &kp C_MUTE            &kp C_VOL_DN  &kp C_VOL_UP
&kp F6   &kp F7   &kp F8  &kp F9  &kp F10  &trans           &trans       &bt BT_PRV     &bt BT_NXT      &kp LS(LG(NUMBER_4))  &trans        &trans
&kp F11  &kp F12  &trans  &trans  &trans   &bootloader      &bootloader  &kp LS(COMMA)  &kp LS(PERIOD)  &trans                &trans        &trans
&trans   &trans   &trans  &trans  &trans   &trans           &trans       &trans                                                             &trans
            >;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &mkp MB1  &mkp MB2
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &mkp MB3  &mo 3
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                            &trans
            >;
        };
    };
};
